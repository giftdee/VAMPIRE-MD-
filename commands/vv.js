// commands/vv.js
const fs = require('fs');
const path = require('path');

module.exports = {
  name: 'vv',
  description: 'Extrait et renvoie un m√©dia en vu unique',
  async execute({ client, message }) {
    try {
      if (!message.quoted || !['viewOnceMessageV2', 'viewOnceMessage'].includes(message.quoted.mtype)) {
        return client.sendMessage(message.from, { text: '‚ùå R√©ponds √† un m√©dia en *vu unique*.' });
      }

      // D√©tecte si c'est une image ou une vid√©o
      const mediaMessage = message.quoted.message;
      const mediaType = mediaMessage.imageMessage ? 'image' : mediaMessage.videoMessage ? 'video' : null;

      if (!mediaType) {
        return client.sendMessage(message.from, { text: '‚ùå M√©dia non pris en charge.' });
      }

      // T√©l√©charge le m√©dia
      const mediaBuffer = await message.quoted.download();
      if (!mediaBuffer) {
        return client.sendMessage(message.from, { text: '‚ùå Impossible de t√©l√©charger le m√©dia.' });
      }

      // Cr√©e un chemin temporaire
      const fileExt = mediaType === 'image' ? 'jpg' : 'mp4';
      const tempFilePath = path.join(__dirname, `../temp/vv_${Date.now()}.${fileExt}`);
      fs.writeFileSync(tempFilePath, mediaBuffer);

      // Envoie le m√©dia comme un fichier normal
      await client.sendMessage(message.from, {
        [mediaType]: fs.readFileSync(tempFilePath),
        caption: 'üëÄ M√©dia extrait avec succ√®s ‚úÖ'
      });

      // Supprime le fichier temporaire
      fs.unlinkSync(tempFilePath);

    } catch (err) {
      console.error('Erreur vv.js:', err);
      client.sendMessage(message.from, { text: '‚ùå Erreur lors de l‚Äôextraction du m√©dia en vu unique.' });
    }
  }
};
