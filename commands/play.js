// commands/play.js
const yts = require("yt-search");
const ytdl = require("ytdl-core");
const fs = require("fs");
const path = require("path");

module.exports = {
  name: "play",
  description: "Recherche et t√©l√©charge une musique sur YouTube",
  async execute({ client, message, args }) {
    try {
      if (!args.length) {
        return client.sendMessage(message.from, { text: "‚ùå Utilisation : !play <nom de la musique>" });
      }

      const query = args.join(" ");
      const search = await yts(query);

      if (!search.videos || search.videos.length === 0) {
        return client.sendMessage(message.from, { text: "‚ùå Aucun r√©sultat trouv√© sur YouTube." });
      }

      const video = search.videos[0]; // üéØ On prend le premier r√©sultat
      const videoInfo = await ytdl.getInfo(video.url);

      // R√©cup√©rer infos du morceau
      const name = video.title;
      const artist = video.author.name;
      const authenticated = video.author.verified ? "‚úÖ Officiel" : "‚ùå Non officiel";
      const views = video.views.toLocaleString();
      const date = video.ago;

      // T√©l√©charger l'audio
      const filePath = path.join("/tmp", `${Date.now()}.mp3`);
      const stream = ytdl(video.url, { filter: "audioonly", quality: "highestaudio" });
      const writeStream = fs.createWriteStream(filePath);
      stream.pipe(writeStream);

      writeStream.on("finish", async () => {
        await client.sendMessage(message.from, {
          text: `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ üÖ•Ô∏éüÖêÔ∏éüÖúÔ∏éüÖüÔ∏éüÖòÔ∏éüÖ°Ô∏éüÖîÔ∏é  ‚ìÇÔ∏é‚íπÔ∏é
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üåêùêïùêÑùêëùêíùêàùêéùêç : *1.0*
üñäÔ∏èùöÉùöàùôøùô¥ : ùôºùô∏ùôΩùô∏-ùô±ùôæùöÉ
üåπ‚Éù‚îÅ‚ùÆ ùìπùìªùì∏ùì∂ùìæùìΩ ùìπùì™ùìª ùì≥ùìÆùì∑ùì≤ùìØùìÆùìª ùîÅùì∂
__________________________________
‚òûùêßùêöùê¶ùêû : *${name}*
‚òûùêöùê´ùê≠ùê¢ùê¨ùê≠ : *${artist}*
‚òûùêöùêÆùê≠ùê°ùêûùêßùê≠ùê¢ùêüùê¢ùêúùêöùê≠ùêûùêù : *${authenticated}*
‚òûùêØùê¢ùêûùê∞ùê¨ : *${views}*
‚òûùêùùêöùê≠ùêû : *${date}*`
        });

        await client.sendMessage(message.from, {
          audio: { url: filePath },
          mimetype: "audio/mpeg",
          ptt: false // ptt=true => audio en format "note vocale"
        });
      });

    } catch (err) {
      console.error("Erreur play.js:", err.message);
      client.sendMessage(message.from, { text: "‚ùå Erreur lors de la r√©cup√©ration de la musique." });
    }
  }
};
